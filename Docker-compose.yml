services:
# === GATEWAY SERVICE ===
  api-gateway:
    build:
      context: ./api_gateway
    container_name: api-gateway
    env_file:
      - ./api_gateway/.env
    #depends_on:
    #  user-service:
    #    condition: service_started
    #  auth-service:
    #    condition: service_started
    #  feed-service:
    #    condition: service_started
    #  rabbitmq:
    #    condition: service_healthy
    ports:
      - "4000:4000"
    networks:
      - suprss-network
    restart: always

  # === USER SERVICE ===
  user-service:
    build:
      context: ./user_service
    container_name: user-service
    env_file:
      - ./user_service/.env
    #depends_on:
    #  user-db:
    #    condition: service_started
    #  rabbitmq:
    #    condition: service_healthy
    networks:
      - suprss-network
    restart: always

  # === AUTH SERVICE ===
  auth-service:
    build:
      context: ./auth_service
    container_name: auth-service
    env_file:
      - ./auth_service/.env
    #depends_on:
    #  rabbitmq:
    #    condition: service_healthy
    #  user-service:
    #    condition: service_started
    networks:
      - suprss-network
    restart: always

  # === FEED SERVICE ===
  feed-service:
    build:
      context: ./feed_service
    container_name: feed-service
    env_file:
      - ./feed_service/.env
    #depends_on:
    #  rabbitmq:
    #    condition: service_healthy
    #  user-service:
    #    condition: service_started
    #  feed-db:
    #    condition: service_started
    networks:
      - suprss-network
    restart: always

  # === COLLECTION SERVICE ===
  collection-service:
    build:
      context: ./collection_service
    container_name: collection-service
    env_file:
      - ./collection_service/.env
    #depends_on:
    #  rabbitmq:
    #    condition: service_healthy
    #  feed-service:
    #    condition: service_started
    networks:
      - suprss-network
    restart: always

  # === MESSENGER SERVICE ===
  messenger-service:
    build:
      context: ./messenger_service
    container_name: messenger-service
    env_file:
      - ./messenger_service/.env
    #depends_on:
    #  rabbitmq:
    #    condition: service_healthy
    #  collection-service:
    #    condition: service_started
    #  messenger-db:
    #    condition: service_started
    ports:
      - "4007:4007"
    networks:
      - suprss-network
    restart: always
  # === POSTGRES DB ===
  user-db:
    image: postgres:17
    container_name: user-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: user_db
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - suprss-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
    # === MONGO DB ===
  feed-db:
    image: mongo:latest
    container_name: feed-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: feed
      MONGO_INITDB_ROOT_PASSWORD: feed
      MONGO_INITDB_DATABASE: feed_db
    ports:
      - "27017:27017"
    networks:
      - suprss-network 
    restart: always
    volumes:
      - feed-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  collection-db:
    image: mongo:latest
    container_name: collection-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: collection
      MONGO_INITDB_ROOT_PASSWORD: collection
      MONGO_INITDB_DATABASE: collection_db
    ports:
      - "27018:27017"
    networks:
      - suprss-network 
    restart: always
    volumes:
      - collection-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  messenger-db:
    image: mongo:latest
    container_name: messenger-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: messenger
      MONGO_INITDB_ROOT_PASSWORD: messenger
      MONGO_INITDB_DATABASE: messenger_db
    ports:
      - "27019:27017"
    networks:
      - suprss-network 
    restart: always
    volumes:
      - messenger-db-data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # === RABBITMQ SERVICE ===
  rabbitmq:
    image: "rabbitmq:4.1.3-management-alpine"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_MANAGEMENT_PROMETHEUS_RET U RN_PER_OBJECT_METRICS: "true"
      RABBITMQ_PROMETHEUS_RETURN_PER_OBJECT_METRICS: "true"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - suprss-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

# === VOLUMES ===
volumes:
  user-db-data:
    driver: local
  feed-db-data:
    driver: local
  collection-db-data:
    driver: local
  messenger-db-data:
    driver: local
  rabbitmq-data:
    driver: local

# === NETWORKS ===
networks:
  suprss-network:
    driver: bridge